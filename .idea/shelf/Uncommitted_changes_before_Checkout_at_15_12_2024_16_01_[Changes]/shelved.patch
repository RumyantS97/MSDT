Index: msdt-1/lab1_file2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import heapq\r\n\r\nclass HuffmanNode:\r\n    def __init__(self, char, freq):\r\n        self.char = char\r\n        self.freq = freq\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def __lt__(self, other):\r\n        return self.freq < other.freq\r\n\r\ndef build_huffman_tree(frequencies):\r\n    heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]\r\n    heapq.heapify(heap)\r\n    while len(heap) > 1:\r\n        left = heapq.heappop(heap)\r\n        right = heapq.heappop(heap)\r\n        merged = HuffmanNode(None, left.freq + right.freq)\r\n        merged.left = left\r\n        merged.right = right\r\n        heapq.heappush(heap, merged)\r\n    return heap[0]\r\n\r\ndef build_huffman_codes(tree, current_code=\"\", codes=None):\r\n    if codes is None:\r\n        codes = {}\r\n\r\n    if tree.char is not None:\r\n        codes[tree.char] = current_code\r\n        return codes\r\n\r\n    if tree.left:\r\n        build_huffman_codes(tree.left, current_code + \"0\", codes)\r\n    if tree.right:\r\n        build_huffman_codes(tree.right, current_code + \"1\", codes)\r\n    return codes\r\n\r\ndef huffman_encode(text, huffman_codes):\r\n    return ''.join(huffman_codes[char] for char in text)\r\n\r\ndef huffman_decode(encoded_text, tree):\r\n    decoded_text = []\r\n    current = tree\r\n\r\n    for bit in encoded_text:\r\n        if bit == '0':\r\n            current = current.left\r\n        else:\r\n            current = current.right\r\n\r\n        if current.char is not None:\r\n            decoded_text.append(current.char)\r\n            current = tree\r\n    return ''.join(decoded_text)\r\n\r\nfrom collections import Counter\r\n\r\ndef frequency_analysis(text):\r\n    return Counter(text)\r\n\r\ndef naive_search(text, pattern):\r\n    n, m = len(text), len(pattern)\r\n    for i in range(n - m + 1):\r\n        if text[i:i + m] == pattern:\r\n            return i\r\n    return -1\r\n\r\ndef kmp_search(text, pattern):\r\n    def build_prefix_table(pattern):\r\n        m = len(pattern)\r\n        lps = [0] * m\r\n        j = 0\r\n        for i in range(1, m):\r\n            if pattern[i] == pattern[j]:\r\n                j += 1\r\n                lps[i] = j\r\n            else:\r\n                if j != 0:\r\n                    j = lps[j - 1]\r\n                    i -= 1\r\n                else:\r\n                    lps[i] = 0\r\n        return lps\r\n\r\n    lps = build_prefix_table(pattern)\r\n    i, j = 0, 0\r\n    while i < len(text):\r\n        if pattern[j] == text[i]:\r\n            i += 1\r\n            j += 1\r\n        if j == len(pattern):\r\n            return i - j\r\n        elif i < len(text) and pattern[j] != text[i]:\r\n            if j != 0:\r\n                j = lps[j - 1]\r\n            else:\r\n                i += 1\r\n    return -1\r\n\r\ndef find_palindromes(text):\r\n    palindromes = []\r\n    n = len(text)\r\n\r\n    def expand_around_center(left, right):\r\n        while left >= 0 and right < n and text[left] == text[right]:\r\n            palindromes.append(text[left:right + 1])\r\n            left -= 1\r\n            right += 1\r\n\r\n    for i in range(n):\r\n        expand_around_center(i, i)      # Odd-length palindromes\r\n        expand_around_center(i, i + 1)  # Even-length palindromes\r\n    return palindromes\r\n\r\ndef main():\r\n    print(\"7. Наивный алгоритм и алгоритм Кнута-Морриса-Пратта для поиска подстроки\")\r\n    print(\"8. Алгоритм поиска всех палиндромных подстрок\")\r\n    print(\"9. Алгоритмы для частотного анализа и кодирования Хаффмана\")\r\n    choice = input(\"Ваш выбор: \")\r\n\r\n    if choice == '1':\r\n        text = input(\"Введите текст: \")\r\n        pattern = input(\"Введите подстроку для поиска: \")\r\n        print(\"\\nНаивный алгоритм:\")\r\n        naive_result = naive_search(text, pattern)\r\n        print(\"Результат:\", naive_result)\r\n        print(\"\\nАлгоритм Кнута-Морриса-Пратта:\")\r\n        kmp_result = kmp_search(text, pattern)\r\n        print(\"Результат:\", kmp_result)\r\n    elif choice == '8':\r\n        text = input(\"Введите текст: \")\r\n        palindromes = find_palindromes(text)\r\n        print(\"\\nНайденные палиндромные подстроки:\", palindromes)\r\n    elif choice == '9':\r\n        text = input(\"Введите текст для анализа частоты символов: \")\r\n        frequencies = frequency_analysis(text)\r\n        print(\"\\nЧастоты символов:\", frequencies)\r\n\r\n        text = input(\"Введите текст для кодирования: \")\r\n        frequencies = frequency_analysis(text)\r\n        print(\"\\nЧастоты символов:\", frequencies)\r\n        huffman_tree = build_huffman_tree(frequencies)\r\n        huffman_codes = build_huffman_codes(huffman_tree)\r\n        print(\"\\nКоды Хаффмана:\", huffman_codes)\r\n        encoded_text = huffman_encode(text, huffman_codes)\r\n        print(\"\\nЗакодированный текст:\", encoded_text)\r\n        decoded_text = huffman_decode(encoded_text, huffman_tree)\r\n        print(\"\\nДекодированный текст:\", decoded_text)\r\n\r\n    else:\r\n        print(\"Неверный выбор! Программа завершена.\")\r\n        return\r\n\r\nif __name__ == \"__main__\":\r\n    main()
===================================================================
diff --git a/msdt-1/lab1_file2.py b/msdt-1/lab1_file2.py
--- a/msdt-1/lab1_file2.py	(revision aeae1d480ef153ba69b15223fbee881b8488acdd)
+++ b/msdt-1/lab1_file2.py	(date 1734085343444)
@@ -14,10 +14,10 @@
     heap = [HuffmanNode(char, freq) for char, freq in frequencies.items()]
     heapq.heapify(heap)
     while len(heap) > 1:
-        left = heapq.heappop(heap)
+        Left = heapq.heappop(heap)
         right = heapq.heappop(heap)
-        merged = HuffmanNode(None, left.freq + right.freq)
-        merged.left = left
+        merged = HuffmanNode(None, Left.freq + right.freq)
+        merged.left = Left
         merged.right = right
         heapq.heappush(heap, merged)
     return heap[0]
