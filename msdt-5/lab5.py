import numpy as np
import math
import random
import scipy.stats as st
import unittest

# –ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä====================\n")
data1 = [3, 4, 6, 8, 2, 3, 7, 5, 6]

# –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
mean1 = np.mean(data1)
print("–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ: ", mean1)

# –î–∏—Å–ø–µ—Ä—Å–∏—è
variance1 = np.var(data1)
print("–î–∏—Å–ø–µ—Ä—Å–∏—è: ", variance1)

# –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
std_deviation1 = np.std(data1)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ", std_deviation1)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
cv1 = (std_deviation1 / mean1) * 100
print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: ", cv1)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
alpha1 = 0.95
std_err1 = st.sem(data1)
interval1 = st.norm.interval(alpha1, loc=mean1, scale=std_err1)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ", interval1)

# –í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä üåà
print("\n====================–í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä====================\n")
data2 = [12, 14, 22, 26, 30, 35, 40, 45, 50]
weights = [0.05, 0.1, 0.15, 0.2, 0.2, 0.15, 0.1, 0.05]

# –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
mean2 = np.average(data2, weights=weights)
print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ", mean2)

# –î–∏—Å–ø–µ—Ä—Å–∏—è
variance2 = np.sum([(x - mean2)**2 * weights[i] for i, x in enumerate(data2)])
print("–î–∏—Å–ø–µ—Ä—Å–∏—è: ", variance2)

# –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
std_deviation2 = math.sqrt(variance2)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ", std_deviation2)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
cv2 = (std_deviation2 / mean2) * 100
print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: ", cv2)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
alpha2 = 0.95
std_err2 = st.sem(data2)
interval2 = st.norm.interval(alpha2, loc=mean2, scale=std_err2)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ", interval2)

# –¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä
print("\n====================–¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä====================\n")
data3 = [3, 6, 7, 12, 14, 17, 19, 24, 28, 30]
probabilities = [0.1, 0.15, 0.1, 0.1, 0.1, 0.15, 0.1, 0.1, 0.05, 0.05]

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
m_exp = np.sum([data3[i] * probabilities[i] for i in range(len(data3))])
print("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: ", m_exp)

# –î–∏—Å–ø–µ—Ä—Å–∏—è
variance3 = np.sum([((data3[i] - m_exp) ** 2) * probabilities[i] for i in range(len(data3))])
print("–î–∏—Å–ø–µ—Ä—Å–∏—è: ", variance3)

# –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
std_deviation3 = math.sqrt(variance3)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ", std_deviation3)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
cv3 = (std_deviation3 / m_exp) * 100
print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: ", cv3)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
mean3 = np.mean(data3)
std_err3 = st.sem(data3)
alpha3 = 0.95
interval3 = st.norm.interval(alpha3, loc=mean3, scale=std_err3)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è: ", interval3)

# –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")
arr_income = [3, 4, 6, 8, 2, 3, 7, 5, 6]
arr_expense = [2, 3, 5, 7, 1, 2, 6, 4, 5]

# –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥
avg_income = np.mean(arr_income)
avg_expense = np.mean(arr_expense)
print("–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: ", avg_income)
print("–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: ", avg_expense)

# –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
profit = [arr_income[i] - arr_expense[i] for i in range(len(arr_income))]
avg_profit = np.mean(profit)
print("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ", avg_profit)

# –î–∏—Å–ø–µ—Ä—Å–∏—è –ø—Ä–∏–±—ã–ª–∏
disp_profit = np.var(profit)
print("–î–∏—Å–ø–µ—Ä—Å–∏—è –ø—Ä–∏–±—ã–ª–∏: ", disp_profit)

# –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏
std_profit = np.std(profit)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏: ", std_profit)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
cv_profit = (std_profit / avg_profit) * 100
print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏: ", cv_profit)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–±—ã–ª–∏
mean_profit = np.mean(profit)
std_err_profit = st.sem(profit)
alpha4 = 0.90
interval4 = st.norm.interval(alpha4, loc=mean_profit, scale=std_err_profit)
print("90% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–∏–±—ã–ª–∏: ", interval4)

# –ü—è—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ü—è—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")

# –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
simulated_data = [random.gauss(50, 15) for _ in range(100)]
print("–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ", simulated_data[:10], "... (–≤—Å–µ–≥–æ 100)")

# –û—Ü–µ–Ω–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö
mean_sim = np.mean(simulated_data)
std_dev_sim = np.std(simulated_data)
print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ", mean_sim)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ", std_dev_sim)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
std_err_sim = st.sem(simulated_data)
alpha5 = 0.95
interval5 = st.norm.interval(alpha5, loc=mean_sim, scale=std_err_sim)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ", interval5)

# –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
q1, q3 = np.percentile(simulated_data, [25, 75])
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr
outliers = [x for x in simulated_data if x < lower_bound or x > upper_bound]
print("–í—ã–±—Ä–æ—Å—ã: ", outliers)

# –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")
array_time = [round(random.uniform(4.0, 4.5), 1), round(random.uniform(4.5, 5.0), 1), round(random.uniform(5.0, 5.5), 1), round(random.uniform(5.5, 6.0), 1), round(random.uniform(6.0, 6.5), 1), round(random.uniform(6.5, 7.0), 1), round(random.uniform(7.0, 7.5), 1), round(random.uniform(7.5, 8.0), 1), round(random.uniform(8.0, 9.5), 1)]
array_worker = [4, 14, 55, 92, 160, 96, 66, 11, 2]
array = []
for nn in range(len(array_worker) - 1):
    for MMM in range(array_worker[nn]):
        array.append(array_time[nn])

# –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ üê≥
sred_znach = 0
for nnn in range (len(array)):
    sred_znach += array[nnn]
sred_znach = sred_znach / len(array)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è c—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ üéã
mean = np.mean(sred_znach)
std_err = st.sem(array)
loc=mean
alpha=0.999
scale=std_err
interval4 = st.norm.interval(alpha, loc, scale)
print("99.9% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è c—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:", interval4)


# –ü—è—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ü—è—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")

count_items = np.array([8, 42, 51, 37, 12])
average_meaning = np.array([12, 14, 16, 18, 20])


# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π üçâ
n = np.sum(count_items)
# –î–∏—Å–ø–µ—Ä—Å–∏—è n/n-1
# –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ ü•ë
average_procent = np.sum(count_items * average_meaning) / n

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ üçÖ
standart_otklonenie = np.sqrt(np.sum(count_items * (average_meaning - average_procent) ** 2) / n)

print("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏:", average_procent)
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", standart_otklonenie)

# –∞) –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–ª—é—á–µ–Ω –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ—Ç 12.5 –¥–æ 17.5 üçé
down_border = 12.5
top_border = 17.5
probability = (top_border - average_procent) / standart_otklonenie - (down_border - average_procent) / standart_otklonenie
print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:", probability)

# –±) –ì—Ä–∞–Ω–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 0.95 –±—É–¥–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π –≤–æ –≤—Å–µ–π –ø–∞—Ä—Ç–∏–∏ üçç
border_95 = np.percentile(count_items, [2.5, 97.5], interpolation='nearest')
print("–ì—Ä–∞–Ω–∏—Ü—ã:", average_procent + border_95 * standart_otklonenie)



# –í—Ç–æ—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ üåà
print("\n====================–í—Ç–æ—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞====================\n")
# –ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n–ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä:")
empire_arr = [14, 18, 32, 70, 36, 20, 10]
teory_arr = [10, 24, 34, 80, 22, 18, 12]
IhateCarrots = [0] * 7
empire_sum = 0
teory_sum = 0
nabludaemoe = 0
s = 7 # –ó–∞–ø–æ–º–Ω–∏–º, –≤ –±—É–¥—É—â–µ–º –Ω–∞–º —ç—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è
for i in range(len(empire_arr)):
    empire_sum += empire_arr[i]
for i in range(len(empire_arr)):
    teory_sum += empire_arr[i]
for i in range(len(empire_arr)):
    IhateCarrots[i] = ((empire_arr[i] - teory_arr[i])**2)/teory_arr[i]
    nabludaemoe += IhateCarrots[i]
if (teory_sum != empire_sum):
    print("–°—É–º–º–∞ —á–∞—Å—Ç–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –∏ –¥–∞–ª—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
else:
    print("–°—É–º–º–∞ —á–∞—Å—Ç–æ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    Hi = 9.48773
    if (Hi < nabludaemoe):
        print("–•–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—å—à–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, H0 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è H1")
    elif (Hi > nabludaemoe):
        print("–•–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –±–æ–ª—å—à–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, H1 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è H0")

# –í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ
X = np.array([7.8, 8.2, 9.1, 8.9, 8.6])
Y = np.array([6.6, 7.1, 6.3, 7, 6.2, 5.8])

# t-–∫—Ä–∏—Ç–µ—Ä–∏–π –°—Ç—å—é–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤—ã–±–æ—Ä–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind(X, Y)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—Ç–∞–Ω–∫–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—Ç–∞–Ω–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)


# –¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ
x_mean = 4.85
y_mean = 5.07
Sx = 0.94
Sy = 1.02
n_x = 15
n_y = 12

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind_from_stats(x_mean, Sx, n_x, y_mean, Sy, n_y)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.01

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)




# –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
x_values = [34, 35, 37, 39]
n_x = [2, 3, 4, 1]

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
y_values = [32, 34, 36]
n_y = [2, 2, 8]

# –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
mean_x = sum([x * n for x, n in zip(x_values, n_x)]) / sum(n_x)
mean_y = sum([y * n for y, n in zip(y_values, n_y)]) / sum(n_y)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–∏
S_x = (sum([n * ((x - mean_x) ** 2) for x, n in zip(x_values, n_x)]) / (sum(n_x) - 1)) ** 0.5
S_y = (sum([n * ((y - mean_y) ** 2) for y, n in zip(y_values, n_y)]) / (sum(n_y) - 1)) ** 0.5

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind_from_stats(mean_x, S_x, sum(n_x), mean_y, S_y, sum(n_y))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)



# –ü—è—Ç—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–ü—è—Ç—ã–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
x_values = [139, 137, 134, 134, 137, 137, 135, 137, 135, 135]
mean_x = sum(x_values) / len(x_values)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
y_values = [136, 136, 132, 134, 136, 136, 134, 132, 136, 136, 136, 136]
mean_y = sum(y_values) / len(y_values)

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind(x_values, y_values)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞

def calculate_statistics(data):
    mean = np.mean(data)
    variance = np.var(data)
    std_deviation = np.std(data)
    cv = (std_deviation / mean) * 100
    std_err = st.sem(data)
    alpha = 0.95
    interval = st.norm.interval(alpha, loc=mean, scale=std_err)
    return mean, variance, std_deviation, cv, interval

def weighted_statistics(data, weights):
    mean = np.average(data, weights=weights)
    variance = np.sum([(x - mean)**2 * weights[i] for i, x in enumerate(data)])
    std_deviation = math.sqrt(variance)
    cv = (std_deviation / mean) * 100
    return mean, variance, std_deviation, cv

def profit_analysis(income, expense):
    profit = [income[i] - expense[i] for i in range(len(income))]
    avg_profit = np.mean(profit)
    disp_profit = np.var(profit)
    std_profit = np.std(profit)
    cv_profit = (std_profit / avg_profit) * 100
    std_err = st.sem(profit)
    alpha = 0.90
    interval = st.norm.interval(alpha, loc=avg_profit, scale=std_err)
    return avg_profit, disp_profit, std_profit, cv_profit, interval

def simulate_data(size, mean, std_dev):
    simulated_data = [random.gauss(mean, std_dev) for _ in range(size)]
    q1, q3 = np.percentile(simulated_data, [25, 75])
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in simulated_data if x < lower_bound or x > upper_bound]
    return simulated_data, lower_bound, upper_bound, outliers

# –¢–µ—Å—Ç—ã
class TestStatistics(unittest.TestCase):

    def test_calculate_statistics(self):
        data = [3, 4, 6, 8, 2, 3, 7, 5, 6]
        mean, variance, std_dev, cv, interval = calculate_statistics(data)
        self.assertAlmostEqual(mean, 4.8888, places=4)
        self.assertAlmostEqual(variance, 3.7654, places=4)
        self.assertAlmostEqual(std_dev, 1.9405, places=4)
        self.assertAlmostEqual(cv, 39.6837, places=4)

    def test_weighted_statistics(self):
        data = [12, 14, 22, 26, 30, 35, 40, 45, 50]
        weights = [0.05, 0.1, 0.15, 0.2, 0.2, 0.15, 0.1, 0.05]
        mean, variance, std_dev, cv = weighted_statistics(data, weights)
        self.assertAlmostEqual(mean, 27.7, places=1)
        self.assertAlmostEqual(variance, 101.36, places=2)
        self.assertAlmostEqual(std_dev, 10.0679, places=4)
        self.assertAlmostEqual(cv, 36.3483, places=4)

    def test_profit_analysis(self):
        income = [3, 4, 6, 8, 2, 3, 7, 5, 6]
        expense = [2, 3, 5, 7, 1, 2, 6, 4, 5]
        avg_profit, disp_profit, std_profit, cv_profit, interval = profit_analysis(income, expense)
        self.assertAlmostEqual(avg_profit, 1.1111, places=4)
        self.assertAlmostEqual(disp_profit, 0.7654, places=4)
        self.assertAlmostEqual(std_profit, 0.8744, places=4)
        self.assertAlmostEqual(cv_profit, 78.662, places=3)

    def test_simulate_data(self):
        simulated_data, lower_bound, upper_bound, outliers = simulate_data(100, 50, 15)
        self.assertEqual(len(simulated_data), 100)
        self.assertIsInstance(outliers, list)

if __name__ == "__main__":
    unittest.main()
